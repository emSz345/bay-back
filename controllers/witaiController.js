const axios = require('axios');
const Event = require('../models/Event');



function extractLocalizacaoManual(text) {
  const localizacoes = [
    's√£o paulo', 'sao paulo', 'sp',
    'rio de janeiro', 'rio', 'rj',
    'minas gerais', 'mg', 'belo horizonte', 'bh',
    'bahia', 'ba', 'salvador',
    'paran√°', 'pr', 'curitiba',
    'rio grande do sul', 'rs', 'porto alegre',
    'pernambuco', 'pe', 'recife',
    'cear√°', 'ce', 'fortaleza',
    // adicione mais cidades/estados conforme necess√°rio
  ];

  const textLower = text.toLowerCase();

  for (const loc of localizacoes) {
    if (textLower.includes(loc)) {
      return loc;
    }
  }

  return null;
}

// Fun√ß√£o para processar a resposta do Wit.ai
function processWitResponse(data) {
  console.log('Resposta Wit.ai:', JSON.stringify(data, null, 2));

  if (data.entities && (data.entities.evento || data.entities.categoria)) {
    return 'Gostaria de saber mais sobre eventos? Posso te ajudar a encontrar shows, festas e outros eventos! üéâ';
  }

  if (!data.intents || data.intents.length === 0) {
    return 'Desculpe, n√£o entendi. Pode reformular?';
  }

  const intent = data.intents[0].name;
  const confidence = data.intents[0].confidence;

  // Confian√ßa m√≠nima de 0.5 para considerar a inten√ß√£o
  if (confidence < 0.5) {
    return 'N√£o tenho certeza do que voc√™ quer dizer. Pode explicar de outra forma?';
  }

  // Respostas baseadas na inten√ß√£o
  const responses = {
    saudacao: [
      'E a√≠! üéß Bora subir essa vibe hoje?',
      'Oi! Tudo bem? Em que posso ser √∫til?',
      'Ol√°! √â um prazer conversar com voc√™!'
    ],
    despedida: [
      'At√© logo! Foi √≥timo conversar com voc√™! üëã',
      'Tchau! Volte sempre que precisar!',
      'At√© mais! Espero ter ajudado!'
    ],
    ajuda: [
      'Claro! Posso ajudar com informa√ß√µes sobre a NaVibe. O que voc√™ gostaria de saber?',
      'Estou aqui para ajudar! Do que voc√™ precisa?',
      'Pergunte √† vontade! Farei o poss√≠vel para ajudar.'
    ],
     evento_pergunta: (entities) => {
    if (entities?.localizacao) {
      return `Vou buscar eventos em ${entities.localizacao[0].value} para voc√™! üó∫Ô∏è`;
    }
  },
    evento_pergunta: [
      'Temos v√°rios eventos incr√≠veis! Quer saber sobre algum espec√≠fico?',
      'Os eventos da NaVibe s√£o sempre animados! Qual voc√™ quer conhecer?',
      'Temos uma programa√ß√£o diversificada. Tem interesse em algum tipo de evento?'
    ],
    evento_busca: [
      'Vou buscar os melhores eventos para voc√™! üé™',
      'Deixa eu ver o que temos de bom acontecendo...',
      'Hmm, vamos encontrar uns eventos tops!'
    ],
    evento_proximos: [
      'Deixa eu ver os pr√≥ximos eventos... üìÖ',
      'Vou listar os eventos que est√£o por vir!',
      'Confere aqui os pr√≥ximos rol√™s!'
    ],
    produto_pergunta: [
      'Temos diversos produtos! üéµ Quer saber sobre CDs, vinis ou merchandising?',
      'Nossa loja tem v√°rias op√ß√µes! Qual produto te interessa?',
      'Temos desde discos at√© roupas! Sobre qual item quer saber?'
    ],
    default: 'Interessante! Sobre a NaVibe, posso te ajudar com informa√ß√µes sobre eventos, produtos e muito mais!'
  };

  const randomResponse = (responsesArray) =>
    responsesArray[Math.floor(Math.random() * responsesArray.length)];

  return responses[intent]
    ? randomResponse(responses[intent])
    : responses.default;
}

// Controlador principal para o Wit.ai
const witaiController = {
  processMessage: async (req, res) => {
    try {
      const { message } = req.body;

      console.log('Recebida mensagem:', message);

      if (!message || message.trim() === '') {
        return res.status(400).json({
          success: false,
          error: 'Mensagem n√£o pode estar vazia'
        });
      }

      // Verifica se o token est√° configurado
      if (!process.env.WIT_AI_SERVER_TOKEN) {
        console.error('WIT_AI_SERVER_TOKEN n√£o est√° configurado');
        return res.status(500).json({
          success: false,
          error: 'Servi√ßo de chat n√£o configurado'
        });
      }

      // Chamada para a API do Wit.ai
      const response = await axios.get(
        `https://api.wit.ai/message?v=20240520&q=${encodeURIComponent(message)}`,
        {
          headers: {
            'Authorization': `Bearer ${process.env.WIT_AI_SERVER_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 10000 // 10 segundos de timeout
        }
      );

      const witData = response.data;

      // Processar a resposta do Wit.ai
      let botReply = processWitResponse(witData);

      console.log('Resposta processada:', botReply);

      let eventos = null;
      if (witData.intents?.[0]?.name === 'evento_pergunta' ||
        witData.intents?.[0]?.name === 'evento_busca' ||
        witData.intents?.[0]?.name === 'evento_proximos' ||
        witData.intents?.[0]?.name === 'evento_localizacao' || // ‚Üê Nova inten√ß√£o
        witData.entities?.evento ||
        witData.entities?.categoria ||
        witData.entities?.localizacao) {


        const filter = { status: 'aprovado' };

        if (witData.entities?.categoria?.[0]?.value) {
          filter.categoria = witData.entities.categoria[0].value;
        }

        let localizacao = null;
        if (witData.entities?.localizacao?.[0]?.value) {
          localizacao = witData.entities.localizacao[0].value;
        } else {
          // Fallback: extrair localiza√ß√£o manualmente do texto
          localizacao = extractLocalizacaoManual(witData.text);
        }

        if (localizacao) {
          filter.$or = [
            { cidade: { $regex: localizacao, $options: 'i' } },
            { estado: { $regex: localizacao, $options: 'i' } }
          ];
        }

        if (witData.entities?.localizacao?.[0]?.value) {
          const localizacao = witData.entities.localizacao[0].value;

          // Buscar tanto por cidade quanto por estado
          filter.$or = [
            { cidade: { $regex: localizacao, $options: 'i' } },
            { estado: { $regex: localizacao, $options: 'i' } }
          ];
        }

        filter.dataInicio = { $gte: new Date().toISOString().split('T')[0] };

        eventos = await Event.find(filter)
          .sort({ dataInicio: 1 })
          .limit(5);

          console.log('Eventos encontrados:', eventos.length);
  console.log('Filtro utilizado:', filter);
  console.log('Localiza√ß√£o detectada:', localizacao);


      }

      res.json({
        success: true,
        reply: botReply,
        intent: witData.intents?.[0]?.name || 'unknown',
        confidence: witData.intents?.[0]?.confidence || 0,
        entities: witData.entities || {},
        eventos: eventos || []
      });

    } catch (error) {
      console.error('Erro Wit.ai:', error.message);
      console.error('Detalhes do erro:', error.response?.data || 'Sem dados de resposta');
      console.error('Status do erro:', error.response?.status);

      res.status(500).json({
        success: false,
        error: 'Erro ao processar mensagem',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  },

  // Rota de sa√∫de para verificar se o Wit.ai est√° funcionando
  healthCheck: async (req, res) => {
    try {
      // Verifica se o token est√° configurado
      if (!process.env.WIT_AI_SERVER_TOKEN) {
        return res.status(500).json({
          success: false,
          error: 'WIT_AI_SERVER_TOKEN n√£o est√° configurado'
        });
      }

      // Testa uma mensagem simples para verificar a conex√£o
      const response = await axios.get(
        `https://api.wit.ai/message?v=20240520&q=Ol√°`,
        {
          headers: {
            'Authorization': `Bearer ${process.env.WIT_AI_SERVER_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 10000
        }
      );

      res.json({
        success: true,
        status: 'Wit.ai conectado com sucesso',
        intent: response.data.intents?.[0]?.name || 'none'
      });
    } catch (error) {
      console.error('Erro no health check:', error.message);
      res.status(500).json({
        success: false,
        error: 'Falha na conex√£o com Wit.ai',
        details: error.message
      });
    }
  },

  // Endpoint para obter informa√ß√µes sobre as inten√ß√µes configuradas
  getIntentsInfo: (req, res) => {
    res.json({
      success: true,
      intents: [
        {
          name: 'saudacao',
          description: 'Sauda√ß√µes e cumprimentos',
          examples: ['oi', 'ol√°', 'bom dia', 'e a√≠']
        },
        {
          name: 'despedida',
          description: 'Despedidas',
          examples: ['tchau', 'at√© logo', 'flw', 'valeu']
        },
        {
          name: 'ajuda',
          description: 'Pedidos de ajuda',
          examples: ['preciso de ajuda', 'como funciona', 'me ajude']
        },
        {
          name: 'evento_pergunta',
          description: 'Perguntas sobre eventos',
          examples: ['quais eventos', 'programa√ß√£o', 'shows']
        },
        {
          name: 'produto_pergunta',
          description: 'Perguntas sobre produtos',
          examples: ['produtos', 'cds', 'vinis', 'merchandising']
        }
      ]
    });
  }
};

module.exports = witaiController;