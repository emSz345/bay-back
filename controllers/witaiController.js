const axios = require('axios');
const Event = require('../models/Event');



function extractLocalizacaoManual(text) {
  const localizacoes = [
    's√£o paulo', 'sao paulo', 'sp',
    'rio de janeiro', 'rio', 'rj',
    'minas gerais', 'mg', 'belo horizonte', 'bh',
    'bahia', 'ba', 'salvador',
    'paran√°', 'pr', 'curitiba',
    'rio grande do sul', 'rs', 'porto alegre',
    'pernambuco', 'pe', 'recife',
    'cear√°', 'ce', 'fortaleza',
    // adicione mais cidades/estados conforme necess√°rio
  ];

  const textLower = text.toLowerCase();

  for (const loc of localizacoes) {
    if (textLower.includes(loc)) {
      return loc;
    }
  }

  return null;
}


function extractCategoriaManual(text) {
  const categoriasComuns = [
    'rock', 'sertanejo', 'funk', 'pop', 'eletr√¥nica', 'eletronica',
    'mpb', 'samba', 'pagode', 'forr√≥', 'forro', 'rap', 'hip hop',
    'reggae', 'jazz', 'blues', 'cl√°ssica', 'classica', 'gospel',
    "show"
  ];

  const textLower = text.toLowerCase();

  for (const cat of categoriasComuns) {
    if (textLower.includes(cat)) {
      return cat;
    }
  }

  return null;
}
// Fun√ß√£o para processar a resposta do Wit.ai
// Fun√ß√£o melhorada para processar respostas
function processWitResponse(data) {
  console.log('Resposta Wit.ai:', JSON.stringify(data, null, 2));

  if (!data.intents || data.intents.length === 0) {
    return {
      text: 'Desculpe, n√£o entendi. Pode reformular ou escolher uma op√ß√£o abaixo? ü§î',
      showCommands: true
    };
  }

  const intent = data.intents[0].name;
  const confidence = data.intents[0].confidence;

  // Confian√ßa m√≠nima de 0.5
  if (confidence < 0.5) {
    return {
      text: 'N√£o tenho certeza do que voc√™ quer dizer. Que tal usar um dos comandos abaixo?',
      showCommands: true
    };
  }

  // Respostas mais ricas e contextualizadas
  const responses = {
    saudacao: {
      text: 'E a√≠! üéß Bora subir essa vibe hoje? Sou seu assistente da NaVibe! üöÄ',
      showCommands: true
    },
    despedida: {
      text: 'At√© logo! Foi √≥timo conversar com voc√™! üëã Volte sempre que precisar!',
      showCommands: false
    },
    ajuda: {
      text: 'Claro! Posso ajudar com:\n‚Ä¢ üìÖ Informa√ß√µes sobre eventos\n‚Ä¢ üéµ Buscar eventos por categoria\n‚Ä¢ üåÜ Eventos por cidade\n‚Ä¢ üé´ Detalhes de ingressos\n‚Ä¢ ‚ùì D√∫vidas gerais',
      showCommands: true
    },
    evento_pergunta: (entities) => {
      if (entities?.localizacao) {
        return {
          text: `üé™ Vou buscar eventos em ${entities.localizacao[0].value.toUpperCase()} para voc√™! üó∫Ô∏è`,
          showCommands: false
        };
      }
      return {
        text: 'N√£o consegui encontrar o evento',
        showCommands: true
      };
    },
    evento_busca: {
      text: 'üîç Buscando os melhores eventos para voc√™...',
      showCommands: false
    },
    categorias_pergunta: {
      text: 'Vou buscar as categorias dispon√≠veis para voc√™! üéµ',
      showCommands: false
    },
    evento_proximos: {
      text: 'üìÖ Listando os pr√≥ximos eventos imperd√≠veis!',
      showCommands: false
    },
    evento_localizacao: (entities) => {
      const local = entities?.localizacao?.[0]?.value || 'essa regi√£o';
      return {
        text: `üåç Procurando eventos em ${local.toUpperCase()}...`,
        showCommands: false
      };
    },
    evento_categoria: (entities) => {
      const categoria = entities?.categoria?.[0]?.value || 'essa categoria';
      return {
        text: `üéµ Buscando eventos de ${categoria}...`,
        showCommands: false
      };
    },
    default: {
      text: 'Interessante! Posso te ajudar com eventos, categorias, cidades ou informa√ß√µes gerais! üé™',
      showCommands: true
    }
  };



  const getResponse = () => {
    if (typeof responses[intent] === 'function') {
      return responses[intent](data.entities);
    }
    return responses[intent] || responses.default;
  };

  return getResponse();
}

// Controlador principal para o Wit.ai
const witaiController = {
  processMessage: async (req, res) => {
    try {
      const { message } = req.body;

      console.log('Recebida mensagem:', message);

      if (!message || message.trim() === '') {
        return res.status(400).json({
          success: false,
          error: 'Mensagem n√£o pode estar vazia'
        });
      }

      // Verifica se o token est√° configurado
      if (!process.env.WIT_AI_SERVER_TOKEN) {
        console.error('WIT_AI_SERVER_TOKEN n√£o est√° configurado');
        return res.status(500).json({
          success: false,
          error: 'Servi√ßo de chat n√£o configurado'
        });
      }

      // Chamada para a API do Wit.ai
      const response = await axios.get(
        `https://api.wit.ai/message?v=20240520&q=${encodeURIComponent(message)}`,
        {
          headers: {
            'Authorization': `Bearer ${process.env.WIT_AI_SERVER_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 10000 // 10 segundos de timeout
        }
      );

      const witData = response.data;

      if (!witData.intents || witData.intents.length === 0) {
        console.log('Nenhuma inten√ß√£o detectada - aplicando fallback...');
        
        // Verifica se h√° palavras-chave de eventos na mensagem
        const hasEventKeywords = /evento|show|festival|concerto|festa|musica|banda|dj|shows|eventos/i.test(witData.text);
        const hasCategoria = extractCategoriaManual(witData.text);
        const hasLocalizacao = extractLocalizacaoManual(witData.text);
        
        if (hasEventKeywords || hasCategoria || hasLocalizacao) {
          console.log('Fallback: Detectadas palavras-chave de evento');
          // For√ßa a inten√ß√£o de busca de eventos
          witData.intents = [{ name: 'evento_busca', confidence: 0.6 }];
        }
      }

      // Processar a resposta do Wit.ai
      let botReply = processWitResponse(witData);

      console.log('Resposta processada:', botReply);

      let eventos = null;
      let categorias = null;

      if (witData.intents?.[0]?.name === 'categorias_pergunta') {
        categorias = await Event.distinct('categoria', { status: 'aprovado' });
        console.log('Categorias encontradas:', categorias);

        botReply = {
          text: `Encontrei ${categorias.length} categorias dispon√≠veis! üéµ`,
          showCommands: false
        };
      }
      else if (witData.intents?.[0]?.name === 'evento_pergunta' ||
        witData.intents?.[0]?.name === 'evento_busca' ||
        witData.intents?.[0]?.name === 'evento_proximos' ||
        witData.intents?.[0]?.name === 'evento_localizacao' ||
        witData.intents?.[0]?.name === 'evento_categoria' || // ‚Üê Adicione esta linha
        witData.entities?.evento ||
        witData.entities?.categoria ||
        witData.entities?.localizacao ||
        extractCategoriaManual(witData.text) || // ‚Üê Adicione esta condi√ß√£o
        extractLocalizacaoManual(witData.text)) { 

        const filter = { status: 'aprovado' };

        if (witData.entities?.categoria?.[0]?.value) {
          filter.categoria = witData.entities.categoria[0].value;
        } else {
          console.log('Texto original:', witData.text);
          console.log('Categoria detectada pelo Wit:', witData.entities?.categoria?.[0]?.value);
          console.log('Categoria extra√≠da manualmente:', extractCategoriaManual(witData.text));
          console.log('Filtro final aplicado:', filter);
          const categoriaManual = extractCategoriaManual(witData.text);
          if (categoriaManual) {
             filter.categoria = { $regex: categoriaManual, $options: 'i' };
          }
        }

        let localizacao = null;
        if (witData.entities?.localizacao?.[0]?.value) {
          localizacao = witData.entities.localizacao[0].value;
        } else {
          // Fallback: extrair localiza√ß√£o manualmente do texto
          localizacao = extractLocalizacaoManual(witData.text);
        }

        if (localizacao) {
          filter.$or = [
            { cidade: { $regex: localizacao, $options: 'i' } },
            { estado: { $regex: localizacao, $options: 'i' } }
          ];
        }

        if (witData.entities?.localizacao?.[0]?.value) {
          const localizacao = witData.entities.localizacao[0].value;

          // Buscar tanto por cidade quanto por estado
          filter.$or = [
            { cidade: { $regex: localizacao, $options: 'i' } },
            { estado: { $regex: localizacao, $options: 'i' } }
          ];
        }

        filter.dataInicio = { $gte: new Date().toISOString().split('T')[0] };

        eventos = await Event.find(filter)
          .sort({ dataInicio: 1 })
          .limit(5);

        console.log('Eventos encontrados:', eventos.length);
        console.log('Filtro utilizado:', filter);
        console.log('Localiza√ß√£o detectada:', localizacao);


      }

      res.json({
        success: true,
        reply: botReply, // Agora √© um objeto {text, showCommands}
        intent: witData.intents?.[0]?.name || 'unknown',
        confidence: witData.intents?.[0]?.confidence || 0,
        entities: witData.entities || {},
        eventos: eventos || [],
        categorias: categorias || []
      });

    } catch (error) {
      console.error('Erro Wit.ai:', error.message);
      console.error('Detalhes do erro:', error.response?.data || 'Sem dados de resposta');
      console.error('Status do erro:', error.response?.status);

      res.status(500).json({
        success: false,
        error: 'Erro ao processar mensagem',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  },

  // Rota de sa√∫de para verificar se o Wit.ai est√° funcionando
  healthCheck: async (req, res) => {
    try {
      // Verifica se o token est√° configurado
      if (!process.env.WIT_AI_SERVER_TOKEN) {
        return res.status(500).json({
          success: false,
          error: 'WIT_AI_SERVER_TOKEN n√£o est√° configurado'
        });
      }

      // Testa uma mensagem simples para verificar a conex√£o
      const response = await axios.get(
        `https://api.wit.ai/message?v=20240520&q=Ol√°`,
        {
          headers: {
            'Authorization': `Bearer ${process.env.WIT_AI_SERVER_TOKEN}`,
            'Content-Type': 'application/json'
          },
          timeout: 10000
        }
      );

      res.json({
        success: true,
        status: 'Wit.ai conectado com sucesso',
        intent: response.data.intents?.[0]?.name || 'none'
      });
    } catch (error) {
      console.error('Erro no health check:', error.message);
      res.status(500).json({
        success: false,
        error: 'Falha na conex√£o com Wit.ai',
        details: error.message
      });
    }
  },

  // Endpoint para obter informa√ß√µes sobre as inten√ß√µes configuradas
  getIntentsInfo: (req, res) => {
    res.json({
      success: true,
      intents: [
        {
          name: 'saudacao',
          description: 'Sauda√ß√µes e cumprimentos',
          examples: ['oi', 'ol√°', 'bom dia', 'e a√≠']
        },
        {
          name: 'despedida',
          description: 'Despedidas',
          examples: ['tchau', 'at√© logo', 'flw', 'valeu']
        },
        {
          name: 'ajuda',
          description: 'Pedidos de ajuda',
          examples: ['preciso de ajuda', 'como funciona', 'me ajude']
        },
        {
          name: 'evento_pergunta',
          description: 'Perguntas sobre eventos',
          examples: ['quais eventos', 'programa√ß√£o', 'shows']
        },
        {
          name: 'produto_pergunta',
          description: 'Perguntas sobre produtos',
          examples: ['produtos', 'cds', 'vinis', 'merchandising']
        }
      ]
    });
  }
};

module.exports = witaiController;