const { Wit } = require('node-wit');
const Event = require('../models/Event');
const axios = require('axios');

// Inicializa o cliente do Wit.ai
const witClient = new Wit({
  accessToken: process.env.WIT_AI_SERVER_TOKEN
});

// Fun√ß√£o auxiliar para validar categoria
function isValidCategory(category) {
  if (!category) return false;

  const catLower = category.toLowerCase().trim();

  const categoriasValidas = [
    'rock', 'sertanejo', 'eletr√¥nica', 'eletronica', 'mpb',
    'funk', 'pop', 'samba', 'forr√≥', 'forro', 'pagode',
    'rap', 'hip hop', 'reggae', 'blues', 'jazz', 'gospel',
    'axe', 'brega', 'metal', 'punk', 'classica', 'cl√°ssica'
  ];

  if (categoriasValidas.includes(catLower)) {
    return true;
  }

  return false;
}

// Fun√ß√£o para normalizar o nome da categoria
function normalizeCategory(category) {
  if (!category) return '';

  const catLower = category.toLowerCase().trim();

  const mapeamentoCategorias = {
    'eletronica': 'Eletr√¥nica',
    'forro': 'Forr√≥',
    'hip hop': 'Hip Hop',
    'classica': 'Cl√°ssica',
    'rock': 'Rock',
    'sertanejo': 'Sertanejo',
    'mpb': 'MPB',
    'funk': 'Funk',
    'pop': 'Pop',
    'samba': 'Samba',
    'forr√≥': 'Forr√≥',
    'pagode': 'Pagode',
    'rap': 'Rap',
    'reggae': 'Reggae',
    'blues': 'Blues',
    'jazz': 'Jazz',
    'gospel': 'Gospel',
    'axe': 'Ax√©',
    'brega': 'Brega',
    'metal': 'Metal',
    'punk': 'Punk',
    'cl√°ssica': 'Cl√°ssica'
  };

  return mapeamentoCategorias[catLower] || category;
}

// Fun√ß√£o para buscar eventos por categoria
async function buscarEventosPorCategoria(categoria) {
  try {
    console.log(`Buscando eventos da categoria: ${categoria}`);

    const categoriaExata = await Event.findOne({
      categoria: new RegExp(`^${categoria}$`, 'i'),
      status: 'aprovado'
    }).select('categoria');

    let categoriaParaBuscar = categoria;

    if (categoriaExata) {
      categoriaParaBuscar = categoriaExata.categoria;
      console.log(`Categoria exata encontrada: ${categoriaParaBuscar}`);
    }

    const eventos = await Event.find({
      categoria: new RegExp(categoriaParaBuscar, 'i'),
      status: 'aprovado',
      dataInicio: { $gte: new Date().toISOString().split('T')[0] }
    })
      .limit(10)
      .sort({ dataInicio: 1 });

    console.log(`Encontrados ${eventos.length} eventos para ${categoriaParaBuscar}`);
    return eventos;
  } catch (error) {
    console.error('Erro ao buscar eventos por categoria:', error);
    return [];
  }
}

// Fun√ß√£o para buscar todas as categorias dispon√≠veis
async function getAvailableCategories() {
  try {
    const categorias = await Event.distinct('categoria', {
      status: 'aprovado',
      dataInicio: { $gte: new Date().toISOString().split('T')[0] }
    });

    const categoriasFiltradas = categorias
      .filter(cat => cat && cat.trim() !== '')
      .map(cat => cat.trim())
      .sort();

    console.log('Categorias dispon√≠veis no banco:', categoriasFiltradas);
    return categoriasFiltradas;
  } catch (error) {
    console.error('Erro ao buscar categorias:', error);
    return ['Rock', 'Sertanejo', 'Eletr√¥nica', 'MPB', 'Funk', 'Pop', 'Samba', 'Forr√≥'];
  }
}

// Fun√ß√£o para verificar se uma categoria existe no banco
async function categoriaExisteNoBanco(categoria) {
  try {
    const categoriaNormalizada = normalizeCategory(categoria);
    const existe = await Event.findOne({
      categoria: new RegExp(categoriaNormalizada, 'i'),
      status: 'aprovado'
    });

    return !!existe;
  } catch (error) {
    console.error('Erro ao verificar categoria:', error);
    return false;
  }
}

// Fun√ß√£o para gerar pr√≥xima pergunta de filtro
function gerarPerguntaFiltro(estadoAtual) {
  const filtrosPendentes = [];

  if (!estadoAtual.quantidade) filtrosPendentes.push('quantidade');
  if (!estadoAtual.faixaPreco) filtrosPendentes.push('faixaPreco');
  if (!estadoAtual.localizacao) filtrosPendentes.push('localizacao');
  if (!estadoAtual.dataPreferencia) filtrosPendentes.push('dataPreferencia');

  return filtrosPendentes[0];
}

// Fun√ß√£o para gerar pergunta espec√≠fica de filtro
function gerarPerguntaPorFiltro(filtro, categoria) {
  switch (filtro) {
    case 'quantidade':
      return `üéâ Voc√™ escolheu ${categoria}! Quantos eventos voc√™ gostaria de ver? (ex: 3, 5, 10)`;
    case 'faixaPreco':
      return `üí∞ Qual sua faixa de pre√ßo preferida para ${categoria}? (ex: at√© 50, entre 50-100, acima de 100)`;
    case 'localizacao':
      return `üìç Em qual cidade voc√™ gostaria de encontrar eventos de ${categoria}?`;
    case 'dataPreferencia':
      return `üìÖ Voc√™ prefere eventos de ${categoria} em alguma data espec√≠fica? (ex: este fim de semana, pr√≥xima semana, qualquer data)`;
    default:
      return `Vamos ajustar sua busca por ${categoria}!`;
  }
}

// Fun√ß√£o para extrair faixa de pre√ßo da mensagem
function extrairFaixaPreco(mensagem) {
  const mensagemLower = mensagem.toLowerCase();

  // Padr√µes para extra√ß√£o de faixa de pre√ßo
  if (mensagemLower.includes('at√©') || mensagemLower.includes('at√©')) {
    const match = mensagemLower.match(/(at√©|at√©)\s*(\d+)/);
    if (match && match[2]) {
      return { min: 0, max: parseInt(match[2]) };
    }
  }

  if (mensagemLower.includes('entre')) {
    const match = mensagemLower.match(/entre\s*(\d+)\s*e\s*(\d+)/);
    if (match && match[1] && match[2]) {
      return { min: parseInt(match[1]), max: parseInt(match[2]) };
    }

    const matchHifen = mensagemLower.match(/(\d+)\s*-\s*(\d+)/);
    if (matchHifen && matchHifen[1] && matchHifen[2]) {
      return { min: parseInt(matchHifen[1]), max: parseInt(matchHifen[2]) };
    }
  }

  if (mensagemLower.includes('acima') || mensagemLower.includes('mais de')) {
    const match = mensagemLower.match(/(acima|mais de)\s*(\d+)/);
    if (match && match[2]) {
      return { min: parseInt(match[2]), max: 1000 }; // Limite m√°ximo arbitr√°rio
    }
  }

  // Extrair n√∫meros simples
  const numeros = mensagemLower.match(/\d+/g);
  if (numeros && numeros.length === 1) {
    return { min: 0, max: parseInt(numeros[0]) };
  }

  if (numeros && numeros.length >= 2) {
    return { min: parseInt(numeros[0]), max: parseInt(numeros[1]) };
  }

  return null;
}

// Fun√ß√£o para extrair localiza√ß√£o da mensagem
function extrairLocalizacao(mensagem, entities) {
  const mensagemLower = mensagem.toLowerCase();



  // Primeiro tenta pelas entidades do Wit.ai
  const localizacaoEntity = entities['localizacao:localizacao']?.[0]?.value;
  if (localizacaoEntity) {
    return localizacaoEntity;
  }

  const witLocationEntity = entities['wit$location:location']?.[0]?.value;
  if (witLocationEntity) {
    console.log('Localiza√ß√£o extra√≠da por entidade built-in:', witLocationEntity);
    return witLocationEntity;
  }

  const cidadesBrasileiras = [
    's√£o paulo', 'rio de janeiro', 'belo horizonte', 'bras√≠lia', 'salvador',
    'fortaleza', 'recife', 'porto alegre', 'curitiba', 'goi√¢nia', 'bel√©m',
    'manaus', 'vit√≥ria', 'florian√≥polis', 'natal', 'jo√£o pessoa', 'macei√≥',
    'campo grande', 'cuiab√°', 'teresina', 'aracaju', 'palmas', 'porto velho',
    'rio branco', 'macap√°', 'boavista'
  ];

  for (const cidade of cidadesBrasileiras) {
    if (mensagemLower.includes(cidade)) {
      console.log('Localiza√ß√£o extra√≠da por lista de cidades:', cidade);
      return cidade;
    }
  }

  // Fallback: procura por padr√µes comuns de cidades
  const padroesCidades = [
    /(?:em|no|na|de)\s+([a-zA-Z√Ä-√ø\s]{3,})/i,
    /(?:em|no|na|de)\s+([a-zA-Z√Ä-√ø]+(?:\s+[a-zA-Z√Ä-√ø]+){1,2})/i,
    /üìç\s*([a-zA-Z√Ä-√ø\s]+)/i,
    /cidade\s+(?:de|do|da)?\s*([a-zA-Z√Ä-√ø\s]+)/i
  ];

  for (const padrao of padroesCidades) {
    const match = mensagem.match(padrao);
    if (match && match[1]) {
      const localExtraido = match[1].trim();
      console.log('Localiza√ß√£o extra√≠da por padr√£o regex:', localExtraido);
      return localExtraido;
    }
  }

  const mapeamentoEstados = {
    's√£o paulo': 'SP', 'sao paulo': 'SP', 'sp': 'SP',
    'rio de janeiro': 'RJ', 'rj': 'RJ',
    'minas gerais': 'MG', 'mg': 'MG',
    'bahia': 'BA', 'ba': 'BA',
    'cear√°': 'CE', 'ceara': 'CE', 'ce': 'CE',
    'paran√°': 'PR', 'parana': 'PR', 'pr': 'PR',
    'rio grande do sul': 'RS', 'rs': 'RS',
    'pernambuco': 'PE', 'pe': 'PE',
    'goi√°s': 'GO', 'goias': 'GO', 'go': 'GO'
  };

  if (localExtraido && mapeamentoEstados[localExtraido.toLowerCase()]) {
    return mapeamentoEstados[localExtraido.toLowerCase()];
  }

  console.log('Nenhuma localiza√ß√£o encontrada na mensagem:', mensagem);
  return localExtraido;
}

// Fun√ß√£o para extrair data da mensagem
function extrairDataPreferencia(mensagem) {
  const mensagemLower = mensagem.toLowerCase();

  if (mensagemLower.includes('fim de semana') || mensagemLower.includes('final de semana')) {
    return 'fim_de_semana';
  }
  if (mensagemLower.includes('pr√≥xima semana') || mensagemLower.includes('proxima semana')) {
    return 'proxima_semana';
  }
  if (mensagemLower.includes('este m√™s') || mensagemLower.includes('esse m√™s')) {
    return 'este_mes';
  }
  if (mensagemLower.includes('qualquer') || mensagemLower.includes('n√£o importa')) {
    return 'qualquer';
  }

  return null;
}

// Fun√ß√£o para buscar eventos com filtros aplicados
async function buscarEventosComFiltros(filtros) {
  try {
    const query = {
      status: 'aprovado',
      dataInicio: { $gte: new Date().toISOString().split('T')[0] }
    };

    // Filtro por categoria
    if (filtros.categoria) {
      query.categoria = new RegExp(filtros.categoria, 'i');
    }

    // Filtro por faixa de pre√ßo
    if (filtros.faixaPreco) {
      query.$or = [
        {
          valorIngressoInteira: {
            $gte: filtros.faixaPreco.min,
            $lte: filtros.faixaPreco.max
          }
        },
        {
          valorIngressoMeia: {
            $gte: filtros.faixaPreco.min,
            $lte: filtros.faixaPreco.max
          }
        }
      ];
    }

    // Filtro por localiza√ß√£o
    if (filtros.localizacao) {
      const localizacaoRegex = new RegExp(filtros.localizacao, 'i');

      query.$or = [
        { cidade: localizacaoRegex },
        { estado: localizacaoRegex },
        { bairro: localizacaoRegex }
      ];

      // Se o usu√°rio pesquisar por "s√£o paulo", tamb√©m buscar por "SP"
      if (filtros.localizacao.toLowerCase().includes('s√£o paulo') ||
        filtros.localizacao.toLowerCase().includes('sao paulo')) {
        query.$or.push({ estado: /SP/i });
      }

      // Mapeamento de estados
      const mapeamentoEstados = {
        's√£o paulo': 'SP', 'sao paulo': 'SP', 'sp': 'SP',
        'rio de janeiro': 'RJ', 'rj': 'RJ',
        'minas gerais': 'MG', 'mg': 'MG',
        // adicione outros estados...
      };

      const estadoMapeado = mapeamentoEstados[filtros.localizacao.toLowerCase()];
      if (estadoMapeado) {
        query.$or.push({ estado: estadoMapeado });
      }
    }

    // Filtro por data (implementa√ß√£o b√°sica)
    if (filtros.dataPreferencia === 'fim_de_semana') {
      // L√≥gica para fim de semana seria mais complexa na realidade
      query.dataInicio = { $gte: new Date().toISOString().split('T')[0] };
    }

    const limite = filtros.quantidade || 10;

    console.log('Query final para busca:', JSON.stringify(query, null, 2));

    const eventos = await Event.find(query)
      .limit(limite)
      .sort({ dataInicio: 1 });

    console.log(`Encontrados ${eventos.length} eventos com filtros:`, filtros);
    return eventos;
  } catch (error) {
    console.error('Erro ao buscar eventos com filtros:', error);
    return [];
  }
}

// Controller principal
// Controller principal
exports.processMessageWithState = async (req, res) => {
  try {
    const { message, state = {} } = req.body;

    console.log('Mensagem recebida:', message);
    console.log('Estado atual:', state);

    let categoriasDisponiveis = await getAvailableCategories();

    // PRIMEIRO: Processar resposta do Wit.ai para ter acesso √†s entities
    let witResponse;
    try {
      witResponse = await witClient.message(message);
      console.log('Resposta do Wit.ai:', JSON.stringify(witResponse, null, 2));
    } catch (witError) {
      console.error('Erro no Wit.ai:', witError);
      witResponse = { intents: [], entities: {} };
    }

    const intent = witResponse.intents[0]?.name || 'default';
    const confidence = witResponse.intents[0]?.confidence || 0;
    const entities = witResponse.entities || {};

    // CASO 1: Usu√°rio est√° respondendo a uma pergunta de filtro
    if (state.waitingForFilter) {
      const filtroAtual = state.waitingForFilter;
      let valorFiltro = null;
      let updatedState = { ...state };

      console.log(`Processando resposta para filtro: ${filtroAtual}`);

      switch (filtroAtual) {
        case 'quantidade':
          // Primeiro tenta pelas entidades do Wit.ai
          const numeroEntity = entities['wit$number:number']?.[0]?.value;
          if (numeroEntity) {
            valorFiltro = parseInt(numeroEntity);
            updatedState.quantidade = Math.min(Math.max(valorFiltro, 1), 20);
            console.log(`Quantidade extra√≠da por entidade: ${valorFiltro}`);
          } else {
            // Fallback: extrair n√∫mero do texto manualmente
            const numeros = message.match(/\d+/);
            if (numeros && numeros[0]) {
              valorFiltro = parseInt(numeros[0]);
              updatedState.quantidade = Math.min(Math.max(valorFiltro, 1), 20);
              console.log(`Quantidade extra√≠da manualmente: ${valorFiltro}`);
            } else {
              // Se n√£o conseguiu extrair n√∫mero, pedir novamente
              return res.json({
                success: true,
                reply: {
                  text: `N√£o entendi a quantidade. Quantos eventos de ${state.categoria} voc√™ gostaria de ver? (ex: 3, 5, 10)`,
                  eventos: [],
                  showCommands: false,
                  state: updatedState,
                  categorias: categoriasDisponiveis
                },
                intent: 'responder_filtro',
                confidence: 1.0,
                categorias: categoriasDisponiveis
              });
            }
          }
          break;

        case 'faixaPreco':
          valorFiltro = extrairFaixaPreco(message);
          if (valorFiltro) {
            updatedState.faixaPreco = valorFiltro;
            console.log(`Faixa de pre√ßo extra√≠da:`, valorFiltro);
          } else {
            return res.json({
              success: true,
              reply: {
                text: `N√£o entendi a faixa de pre√ßo. Qual valor voc√™ pretende gastar em ${state.categoria}? (ex: at√© 50, entre 50-100)`,
                eventos: [],
                showCommands: false,
                state: updatedState,
                categorias: categoriasDisponiveis
              },
              intent: 'responder_filtro',
              confidence: 1.0,
              categorias: categoriasDisponiveis
            });
          }
          break;

        case 'localizacao':
          valorFiltro = extrairLocalizacao(message, entities);
          if (valorFiltro) {
            updatedState.localizacao = valorFiltro;
            console.log(`Localiza√ß√£o extra√≠da: ${valorFiltro}`);
          } else {
            return res.json({
              success: true,
              reply: {
                text: `N√£o entendi a localiza√ß√£o. Em qual cidade voc√™ quer eventos de ${state.categoria}?`,
                eventos: [],
                showCommands: false,
                state: updatedState,
                categorias: categoriasDisponiveis
              },
              intent: 'responder_filtro',
              confidence: 1.0,
              categorias: categoriasDisponiveis
            });
          }
          break;

        case 'dataPreferencia':
          valorFiltro = extrairDataPreferencia(message);
          if (valorFiltro) {
            updatedState.dataPreferencia = valorFiltro;
            console.log(`Prefer√™ncia de data extra√≠da: ${valorFiltro}`);
          } else {
            return res.json({
              success: true,
              reply: {
                text: `N√£o entendi a prefer√™ncia de data. Quando voc√™ quer eventos de ${state.categoria}? (ex: este fim de semana, pr√≥xima semana)`,
                eventos: [],
                showCommands: false,
                state: updatedState,
                categorias: categoriasDisponiveis
              },
              intent: 'responder_filtro',
              confidence: 1.0,
              categorias: categoriasDisponiveis
            });
          }
          break;
      }

      // Determinar pr√≥ximo filtro
      updatedState.waitingForFilter = gerarPerguntaFiltro(updatedState);

      let replyText = '';
      let eventos = [];

      if (updatedState.waitingForFilter) {
        // Ainda h√° filtros pendentes
        replyText = gerarPerguntaPorFiltro(updatedState.waitingForFilter, updatedState.categoria);
      } else {
        eventos = await buscarEventosComFiltros(updatedState);
        if (eventos.length > 0) {
          replyText = `üéâ Encontrei ${eventos.length} evento(s) de ${updatedState.categoria} com seus filtros!`;
          categoriasDisponiveis = [];
        } else {
          replyText = `üòî N√£o encontrei eventos de ${updatedState.categoria} com esses filtros. Que tal tentar outros crit√©rios?`;
        }
        // Atualizar estado SEM eventosEncontrados (vamos usar o array principal)
        updatedState.showCommands = true;
      }

      return res.json({
        success: true,
        reply: {
          text: replyText,
          eventos: eventos, // ‚Üê GARANTIR que eventos est√£o aqui
          showCommands: !updatedState.waitingForFilter,
          state: updatedState,
          categorias: categoriasDisponiveis
        },
        intent: 'responder_filtro',
        confidence: 1.0,
        categorias: categoriasDisponiveis,
        eventos: eventos // ‚Üê E tamb√©m aqui para compatibilidade
      });
    }

    // CASO 2: Sele√ß√£o de categoria atrav√©s de bot√£o
    if (isValidCategory(message)) {
      const categoriaSelecionada = normalizeCategory(message);
      const categoriaExiste = await categoriaExisteNoBanco(categoriaSelecionada);

      if (!categoriaExiste) {
        return res.json({
          success: true,
          reply: {
            text: `üòî A categoria "${categoriaSelecionada}" n√£o foi encontrada. Que tal tentar uma dessas?`,
            eventos: [],
            showCommands: true,
            state: state,
            categorias: categoriasDisponiveis
          },
          intent: 'categoria_nao_encontrada',
          confidence: 1.0,
          categorias: categoriasDisponiveis
        });
      }

      // Iniciar fluxo de filtros
      const proximoFiltro = gerarPerguntaFiltro(state);
      const updatedState = {
        ...state,
        categoria: categoriaSelecionada,
        waitingForFilter: proximoFiltro
      };

      let replyText = '';
      let eventos = [];

      if (proximoFiltro) {
        replyText = gerarPerguntaPorFiltro(proximoFiltro, categoriaSelecionada);
      } else {
        // Buscar eventos diretamente se n√£o h√° filtros pendentes
        eventos = await buscarEventosPorCategoria(categoriaSelecionada);
        replyText = eventos.length > 0
          ? `üéâ Encontrei ${eventos.length} evento(s) de ${categoriaSelecionada}!`
          : `üòî N√£o encontrei eventos de ${categoriaSelecionada} no momento.`;
      }

      return res.json({
        success: true,
        reply: {
          text: replyText,
          eventos: eventos,
          showCommands: !proximoFiltro,
          state: updatedState,
          categorias: categoriasDisponiveis
        },
        intent: 'selecionar_categoria',
        confidence: 1.0,
        categorias: categoriasDisponiveis
      });
    }

    // CASO 3: Processamento normal pelo Wit.ai
    let replyText = '';
    let eventos = [];
    let showCommands = true;
    let updatedState = { ...state };

    // Processamento baseado na inten√ß√£o
    switch (intent) {
      case 'buscar_eventos':
        const categoriaEntity = entities['categoria:categoria']?.[0]?.value;
        const localizacaoEntity = entities['localizacao:localizacao']?.[0]?.value;

        if (categoriaEntity) {
          const categoriaNormalizada = normalizeCategory(categoriaEntity);
          eventos = await buscarEventosPorCategoria(categoriaNormalizada);
          replyText = eventos.length > 0
            ? `üéµ Encontrei ${eventos.length} evento(s) de ${categoriaNormalizada}!`
            : `üòî N√£o encontrei eventos de ${categoriaNormalizada}. Que tal tentar outra categoria?`;
        } else if (localizacaoEntity) {
          eventos = await Event.find({
            cidade: new RegExp(localizacaoEntity, 'i'),
            status: 'aprovado'
          }).limit(10);
          replyText = eventos.length > 0
            ? `üìç Encontrei ${eventos.length} evento(s) em ${localizacaoEntity}!`
            : `üòî N√£o encontrei eventos em ${localizacaoEntity}.`;
        } else {
          eventos = await Event.find({
            status: 'aprovado',
            dataInicio: { $gte: new Date().toISOString().split('T')[0] }
          }).limit(10);
          replyText = eventos.length > 0
            ? `üé™ Encontrei ${eventos.length} evento(s)!`
            : 'üòî N√£o encontrei eventos no momento.';
        }
        break;

      case 'listar_categorias':
        replyText = categoriasDisponiveis.length > 0
          ? 'üéµ Aqui est√£o as categorias dispon√≠veis:'
          : 'üòî N√£o encontrei categorias dispon√≠veis no momento.';
        break;

      case 'saudacao':
        replyText = 'E a√≠! Bora subir essa vibe hoje? Que tipo de evento voc√™ est√° procurando? üé™';
        break;

      case 'ajuda':
        replyText = 'Claro! Posso te ajudar a:\n\n' +
          'üéµ ‚Ä¢ Encontrar eventos por categoria\n' +
          'üìç ‚Ä¢ Buscar eventos por cidade\n' +
          'üìÖ ‚Ä¢ Ver eventos por data\n' +
          'üí∞ ‚Ä¢ Filtrar por pre√ßo\n\n' +
          'O que voc√™ gostaria de fazer?';
        break;

      case 'agradecimento':
        replyText = 'Por nada! Fico feliz em ajudar. üòä\nPrecisa de mais alguma coisa?';
        break;

      default:
        const mensagemLower = message.toLowerCase();

        if (mensagemLower.includes('categorias') ||
          mensagemLower.includes('categoria') ||
          mensagemLower.includes('tipos') ||
          mensagemLower.includes('que categorias')) {
          replyText = 'üéµ Aqui est√£o as categorias dispon√≠veis:';
        } else if (mensagemLower.includes('eventos') ||
          mensagemLower.includes('shows') ||
          mensagemLower.includes('festas')) {
          eventos = await Event.find({
            status: 'aprovado',
            dataInicio: { $gte: new Date().toISOString().split('T')[0] }
          }).limit(5);
          replyText = eventos.length > 0
            ? `üé™ Encontrei ${eventos.length} evento(s)!`
            : 'üòî N√£o encontrei eventos no momento.';
        } else {
          replyText = 'Interessante! Posso te ajudar com eventos, categorias, cidades ou informa√ß√µes gerais! üé™';
        }
    }

    res.json({
      success: true,
      reply: {
        text: replyText,
        eventos: eventos,
        categorias: eventos.length > 0 ? [] : categoriasDisponiveis,
        showCommands: showCommands,
        state: updatedState
      },
      intent: intent,
      confidence: confidence,
      entities: entities,
      categorias: eventos.length > 0 ? [] : categoriasDisponiveis,
    });

  } catch (error) {
    console.error('Erro no processMessageWithState:', error);

    const categoriasDisponiveis = await getAvailableCategories();

    res.status(500).json({
      success: false,
      error: error.message,
      reply: {
        text: 'Estou com dificuldades t√©cnicas. Tente novamente em instantes! üõ†Ô∏è',
        categorias: categoriasDisponiveis,
        showCommands: true
      },
      categorias: categoriasDisponiveis
    });
  }
};

// Health check
exports.healthCheck = async (req, res) => {
  try {
    await witClient.message('teste');
    const categorias = await getAvailableCategories();

    res.json({
      success: true,
      witai: 'conectado',
      database: 'conectado',
      categorias: categorias
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      witai: 'erro',
      database: 'erro',
      error: error.message
    });
  }
};

// Obter informa√ß√µes sobre inten√ß√µes
exports.getIntentsInfo = async (req, res) => {
  try {
    const categorias = await getAvailableCategories();

    res.json({
      intents: [
        'buscar_eventos',
        'listar_categorias',
        'saudacao',
        'ajuda',
        'agradecimento',
        'responder_filtro',
        'selecionar_categoria'
      ],
      entities: ['categoria', 'localizacao', 'data', 'preco', 'quantidade'],
      categorias_disponiveis: categorias
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};